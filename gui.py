# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Thu Sep 25 21:53:37 2008

import wx
import wx.adv
import meta
import configparser
from pathlib import Path

# begin wxGlade: extracode
# end wxGlade

import sys
if 'win' in sys.platform:
    import win32con

from worker import WorkerThread
import images

import defaultSettings



FORWARD_RATIO = 2


def run():
    app = wx.App()
    dlg = MainDialog(None)
    app.SetTopWindow(dlg)
    dlg.Show(meta.DEBUG)
    app.MainLoop()
    


class MainDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MainDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE|wx.RESIZE_BORDER
        wx.Dialog.__init__(self, *args, **kwds)
        self.char_lbl = wx.StaticText(self, -1, "", style=wx.ALIGN_CENTRE|wx.ST_NO_AUTORESIZE)
        self.input_txt = wx.TextCtrl(self, -1, "")
        self.candidate_lst = CharList(self)
        self.copy_btn = wx.Button(self, wx.ID_OK, "Copy")
        self.cancel_btn = wx.Button(self, wx.ID_CANCEL, "Hide")
        self.taskbar_icon = wx.adv.TaskBarIcon()
        #Read the config file
        wx.GetApp().SetAppName(meta.APPNAME_SHORT)
        data_dir = Path(wx.StandardPaths.Get().GetUserDataDir())
        try:
            data_dir.mkdir()
        except:
            pass
        configFileName = data_dir / 'uibn_settings.ini'
        
        self.config = configparser.ConfigParser(defaults=defaultSettings.defaultSettings)
        try:
            self.config.read(configFileName) 
        except Exception as error: #if we fail, do nothing.
            print("Could not read the config file:", type(error).__name__, "â€“", error)
            pass            
        if not (self.config.has_section('Appearance')):
            self.config.add_section('Appearance')

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TEXT, self.on_text_change, self.input_txt)
        self.input_txt.Bind(wx.EVT_KEY_DOWN, self.on_text_key_down)
        
        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.on_item_selected, self.candidate_lst)
        self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.on_item_activated, self.candidate_lst)
        self.Bind(wx.EVT_LIST_CACHE_HINT, self.on_cache_hint, self.candidate_lst)
        self.candidate_lst.Bind(wx.EVT_SCROLLWIN, self.on_scroll)
        self.candidate_lst.Bind(wx.EVT_SIZE, self.on_candidate_resize)
        
        self.Bind(wx.EVT_BUTTON, self.on_copy_click, self.copy_btn)
        self.Bind(wx.EVT_BUTTON, self.on_cancel_click, self.cancel_btn)
        self.Bind(wx.EVT_CLOSE, self.on_close)
        self.Bind(wx.EVT_ACTIVATE, self.on_activate)
        self.taskbar_icon.Bind(wx.adv.EVT_TASKBAR_CLICK, self.on_hotkey)
        self.taskbar_icon.Bind(wx.adv.EVT_TASKBAR_LEFT_UP, self.on_hotkey)
        # end wxGlade
        
        if 'win' in sys.platform:
            self.hotkey_id = 100
            res = self.RegisterHotKey(self.hotkey_id, win32con.MOD_ALT, win32con.VK_ADD)
            assert res
            self.Bind(wx.EVT_HOTKEY, self.on_hotkey, id=self.hotkey_id)
        
        # Start the WorkerThread
        self.cache = {}
        self.char = None
        self.query = None
        self.waiting_query = None
        self.worker = WorkerThread(self)
        self.worker.start()
        self.input_txt.SetValue('')

    def __set_properties(self):
        # begin wxGlade: MainDialog.__set_properties
        self.SetTitle(meta.APPNAME)
        self.char_lbl.SetFont(wx.Font(wx.FontInfo(pointSize=self.config.getint('Appearance','FONT_SIZE_PT_CURRENT_CHAR'))))
        self.SetMinSize((300, 400))
        # end wxGlade
        self.copy_btn.SetDefault()
        bundle = wx.IconBundle()
        bundle.AddIcon(images.upsilon16.Icon)
        bundle.AddIcon(images.upsilon32.Icon)
        bundle.AddIcon(images.upsilon48.Icon)
        bundle.AddIcon(images.upsilon256.Icon)
        self.SetIcons(bundle)
        self.taskbar_icon.SetIcon(images.upsilon16.Icon, meta.APPNAME)

        self.candidate_lst.SetFont(wx.Font(wx.FontInfo(pointSize=self.config.getint('Appearance','FONT_SIZE_CANDIDATE_LIST'))))


    def __do_layout(self):
        # begin wxGlade: MainDialog.__do_layout
        main_sizer = wx.BoxSizer(wx.VERTICAL)
        btn_sizer = wx.StdDialogButtonSizer()
        main_sizer.Add(self.char_lbl, 0, wx.LEFT|wx.RIGHT|wx.TOP|wx.EXPAND, 10)
        main_sizer.Add(self.input_txt, 0, wx.LEFT|wx.RIGHT|wx.TOP|wx.EXPAND, 10)
        main_sizer.Add(self.candidate_lst, 1, wx.LEFT|wx.RIGHT|wx.TOP|wx.EXPAND, 10)
        btn_sizer.AddButton(self.copy_btn)
        btn_sizer.AddButton(self.cancel_btn)
        btn_sizer.Realize()
        main_sizer.Add(btn_sizer, 0, wx.ALL|wx.EXPAND, 10)
        self.SetSizer(main_sizer)
        main_sizer.Fit(self)
        self.Layout()
        # end wxGlade
        
    def on_close(self, event):
        self.worker.on_program_closed()
        #self.taskbar_icon.Destroy()
        self.Destroy()

    def on_text_change(self, event): # wxGlade: MainDialog.<event_handler>
        text = event.GetString()
        self.waiting_query = text
        self.worker.get_count(self.waiting_query)
        event.Skip()
        
    def on_get_count_done(self, query, count):
        if query == self.waiting_query:
            self.query = self.waiting_query
            self.cache = {}
            self.candidate_lst.SetItemCount(count)
            self.candidate_lst.Refresh()
            if count > 0:
                sel = self.candidate_lst.GetFirstSelected()
                if sel != -1:
                    self.candidate_lst.Select(sel, 0)
                self.candidate_lst.Select(0)
                self.candidate_lst.EnsureVisible(0)
                self.on_scroll(None)
                
    def on_scroll(self, event):
        if event is None or event.Orientation == wx.VERTICAL:
            #the GetTopItem/GetCountPerPage values are from
            #before the scroll, so we must update after the event
            def fn():
                top = self.candidate_lst.GetTopItem()
                count = self.candidate_lst.GetCountPerPage() * FORWARD_RATIO
                self.worker.get_chars(self.query, top, count)
            wx.CallAfter(fn)
        if event:
            event.Skip()
                
    def on_get_chars_done(self, query, chars, start):
        if query == self.query:
            sel = self.candidate_lst.GetFirstSelected()
            i = start
            dirty = False
            for char in chars:
                if i not in self.cache or self.cache[i] is None:
                    dirty = True
                self.cache[i] = char
                if i == sel:
                    self.char = char
                    self.char_lbl.SetLabel(chr(char['id']))
                i += 1
            if dirty:
                self.candidate_lst.RefreshItems(start, i-1)
        
    def on_text_key_down(self, event):
        sel = self.candidate_lst.GetFirstSelected()
        if event.KeyCode in (wx.WXK_UP, wx.WXK_DOWN):
            if event.KeyCode == wx.WXK_UP:
                sel -= 1
            else:
                sel += 1
            if 0 <= sel < self.candidate_lst.ItemCount:
                self.candidate_lst.Select(sel)
                self.candidate_lst.EnsureVisible(sel)
        else:
            event.Skip()

    def on_item_selected(self, event): # wxGlade: MainDialog.<event_handler>
        item = event.GetIndex()
        try:
            char = self.cache[item]
            if char != None:
                self.char = char
                self.char_lbl.SetLabel(chr(self.char['id']))
        except KeyError:
            pass
        event.Skip()

    def on_item_activated(self, event): # wxGlade: MainDialog.<event_handler>
        self.on_copy_click(event)

    def on_cache_hint(self, event): # wxGlade: MainDialog.<event_handler>
        event.Skip()

    def on_copy_click(self, event): # wxGlade: MainDialog.<event_handler>
        data = wx.TextDataObject()
        data.SetText(self.char_lbl.GetLabel())
        if wx.TheClipboard.Open():
            wx.TheClipboard.SetData(data)
            wx.TheClipboard.Close()
        self.Show(False)
        self.worker.increment_frequency(self.char)
        event.Skip()

    def on_cancel_click(self, event): # wxGlade: MainDialog.<event_handler>
        self.Show(False)
        event.Skip()
        
    def on_candidate_resize(self, event):
        width = self.candidate_lst.GetClientSize().Get()[0]
        self.candidate_lst.SetColumnWidth(0, 30)
        self.candidate_lst.SetColumnWidth(1, width - 60)
        
    def on_hotkey(self, event):
        self.Show()
        self.Raise()
        self.SetFocus()
        
    def on_activate(self, event):
        self.input_txt.SetSelection(-1, -1)
        self.input_txt.SetFocus()
        event.Skip()

# end of class MainDialog


class CharList(wx.ListCtrl):
    def __init__(self, parent):
        wx.ListCtrl.__init__(self, parent, -1, style=wx.LC_REPORT|wx.LC_VIRTUAL|wx.LC_NO_HEADER|wx.LC_SINGLE_SEL)
        
        self.InsertColumn(0, '')
        self.InsertColumn(1, '')
        
    def OnGetItemText(self, item, col):
        try:
            char = self.Parent.cache[item]
        except KeyError:
            top = self.GetTopItem()
            count = self.GetCountPerPage() * FORWARD_RATIO
            self.Parent.worker.get_chars(self.Parent.query, top, count)
            return ''
        return (chr(char['id']), char['name'].capitalize())[col]
